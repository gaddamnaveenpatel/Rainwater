package basic;

package GsInterviewquestion;

public class TappingRainWater_2 {

    public static void main(String[] args) {

        int nums[] = {0,1,0,2,1,0,1,3,2,1,2,1};

        int a = tappingrainwater(nums);

        System.out.println(a);
    }

    static int tappingrainwater(int nums[]){

        int leftmax = Integer.MIN_VALUE;

        int rightmax = Integer.MIN_VALUE;

        int  i =0,j = nums.length-1;

        int res = 0;

        while (i<j){

             if(nums[i]>leftmax)

                 leftmax = nums[i];

             if(nums[j]>rightmax)

                 rightmax = nums[j];

             if(leftmax<rightmax){

               res = res+(leftmax-nums[i]);
               i++;
             }else {

                 res = res+ (rightmax-nums[j]);
                 j--;
             }

        }

        return res;
    }
}
======================================================================================================


public class validprarthasis {

    public static void main(String[] args) {

        String s = "([])";

        boolean a = isvalid(s);

        System.out.println(a);
    }

    static boolean isvalid(String s){

        Stack<Character> stack = new Stack<Character>();
        for (char c : s.toCharArray()) {
            if (c == '(')
                stack.push(')');
            else if (c == '{')
                stack.push('}');
            else if (c == '[')
                stack.push(']');
            else if (stack.isEmpty() || stack.pop() != c)

                return false;
        }

        return stack.isEmpty();
    }
}



















====================================================================================================================================================================
package basic;

import java.util.Stack;
import java.util.HashMap;
import java.util.Map;

public class ValidParanthesis {

    // Check if the parentheses are valid or not in given input
    public static boolean isValid(String s) {


        // Stack to maintain opening parentheses
        Stack<Character> stack = new Stack<>();


        // Map to store matching pairs of parentheses
        Map<Character, Character> bracesMap = new HashMap<>();
        bracesMap.put(')', '(');
        bracesMap.put('}', '{');
        bracesMap.put(']', '[');


        // Iterate the string
        for (int i = 0; i < s.length(); i++) {

            //Getting each character
            char c = s.charAt(i);

            // If the character is a closing bracket
            if (bracesMap.containsKey(c)) {

                // If the stack is empty, There is an unmatched closing bracket
                if (stack.isEmpty()) {
                    return false;
                }


                // Pop the stack and check if it matches the corresponding opening bracket
                char top = stack.pop();
                if (top != bracesMap.get(c)) {
                    return false;  // Mismatched bracket types
                }
            }


            // If it's an opening bracket, push it onto the stack
            else if (bracesMap.containsValue(c)) {
                stack.push(c);
            }

        }

        // After processing all characters, the stack should be empty
        // If it's not empty, There are extra opening brackets
        return stack.isEmpty();
    }

    public static void main(String[] args) {

        // Edge cases
        String s1 = "(a + (b - c) + z) - z)";    // Expected: false (extra closing bracket)
        String s2 = "(a + (b - c) + z - z)";     // Expected: true (valid)
        String s3 = "((a + (b - c) + z - z)";    // Expected: false (extra opening bracket)
        String s4 = "(a + {b - c) + z}";         // Expected: false (bracket types do not match)
        String s5 = "y + (a + (b - c) + z - z)"; // Expected: true (valid)

        System.out.println(isValid(s1)); // false
        System.out.println(isValid(s2)); // true
        System.out.println(isValid(s3)); // false
        System.out.println(isValid(s4)); // false
        System.out.println(isValid(s5)); // true
    }
}



